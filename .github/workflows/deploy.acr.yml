name: Deploy to AKS

on:
  workflow_call:  # Makes this workflow reusable

env:
  NAMESPACE: ${{ vars.NAMESPACE_NAME }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  IMAGE_TAG: ${{ vars.IMAGE_TAG }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout application code
        uses: actions/checkout@v4
        with:
          path: app
      
      - name: Checkout cicd-tools templates
        uses: actions/checkout@v4
        with:
          repository: Nexus-Team-Project/cicd-tools
          ref: build-basic-cicd
          path: cicd-tools
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Azure Login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}

      - name: Process and apply K8s templates
        run: |
          # Set variables for template substitution
          export APP_NAME="${{ github.event.repository.name }}"
          export IMAGE_NAME="${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ github.event.repository.name }}:${{ env.IMAGE_TAG }}"
          export NAMESPACE="${{ env.NAMESPACE }}"
          
          # Process templates (using envsubst for variable substitution)
          for template in cicd-tools/k8s/*.yaml; do
            if [ -f "$template" ]; then
              echo "Processing template: $template"
              envsubst < "$template" | kubectl apply -f -
            fi
          done

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/${{ github.event.repository.name }} --namespace=${{ env.NAMESPACE }} --timeout=300s

      - name: Get service endpoint
        run: |
          echo "Deployment completed successfully!"
          kubectl get service ${{ github.event.repository.name }} --namespace=${{ env.NAMESPACE }}